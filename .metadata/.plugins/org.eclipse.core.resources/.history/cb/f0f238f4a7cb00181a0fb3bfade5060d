package com.niit.OnlineShoppingBackend.config;

import java.util.Properties;

import javax.sql.DataSource;

import org.hibernate.SessionFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.orm.hibernate4.HibernateTransactionManager;
import org.springframework.orm.hibernate4.LocalSessionFactoryBuilder;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import com.niit.OnlineShoppingBackend.model.Category;
import com.niit.OnlineShoppingBackend.model.Product;
import com.niit.OnlineShoppingBackend.model.User;

@Configuration
@ComponentScan(basePackages = "com.niit")
@EnableTransactionManagement
public class ApplicationContextConfig {
	/*
	 * @Bean("dataSource") public DataSource getDataSource() {
	 * System.out.println("i am in datasource");
	 * 
	 * BasicDataSource datasource = new BasicDataSource();
	 * datasource.setDriverClassName("org.h2.Driver");
	 * datasource.setUrl("jdbc:h2:~/OnlineShopping");
	 * datasource.setUsername("sa"); //datasource.setPassword("password");
	 * return datasource; }
	 * 
	 * @Autowired
	 * 
	 * @Bean public LocalSessionFactoryBean getSessionFactory(DataSource
	 * dataSource) { System.out.println("i am in local session factory");
	 * LocalSessionFactoryBean sessionFactory = new LocalSessionFactoryBean();
	 * sessionFactory.setDataSource(dataSource);
	 * sessionFactory.setHibernateProperties(getHibernateProperties());
	 * sessionFactory.setPackagesToScan(new String[] { "com.niit" });
	 * 
	 * return sessionFactory; }
	 * 
	 * public Properties getHibernateProperties() {
	 * System.out.println("i am in hibernate properties"); Properties properties
	 * = new Properties(); properties.setProperty("hibernate.dialect",
	 * "org.hibernate.dialect.H2Dialect");
	 * properties.setProperty("hibernate.show_sql", "true");
	 * properties.setProperty("hibernate.format_sql", "true");
	 * properties.setProperty("hibernate.hbm2ddl.auto", "update");
	 * 
	 * return properties; }
	 * 
	 * @Autowired
	 * 
	 * @Bean public HibernateTransactionManager
	 * getTransactionManager(SessionFactory sessionFactory) {
	 * System.out.println("i am in transaction mgr");
	 * HibernateTransactionManager transactionManager = new
	 * HibernateTransactionManager();
	 * transactionManager.setSessionFactory(sessionFactory); return
	 * transactionManager; }
	 */
	@Bean(name = "dataSource")
	public DataSource getH2DataSource() {

		DriverManagerDataSource dataSource = new DriverManagerDataSource();

		dataSource.setDriverClassName("org.h2.Driver");

		dataSource.setUrl("jdbc:h2:~/test");

		dataSource.setUsername("sa");

		dataSource.setPassword("sa");

		return dataSource;

	}

	@Bean(name = "sessionFactory")
	public SessionFactory getSessionFactory() {

		Properties hibernateProperties = new Properties();
		hibernateProperties.put("hibernate.dialect", "org.hibernate.dialect.H2Dialect");
		hibernateProperties.setProperty("hibernate.hbm2ddl.auto", "update");
		hibernateProperties.setProperty("hibernate.show_sql", "true");

		LocalSessionFactoryBuilder localsessionFactory = new LocalSessionFactoryBuilder(getH2DataSource());
		localsessionFactory.addProperties(hibernateProperties);

		localsessionFactory.addAnnotatedClass(Category.class);
		localsessionFactory.addAnnotatedClass(Product.class);
		localsessionFactory.addAnnotatedClass(User.class);
		SessionFactory sessionFactory = localsessionFactory.buildSessionFactory();

		return sessionFactory;

	}

	@Bean
	public HibernateTransactionManager hibTransManagement() {
		return new HibernateTransactionManager(getSessionFactory());

	}
}